[template public generateFlinkCoMapTransformation(
					aClass:Class)
	{first : DirectedRelationship = 
			getInputs(aClass)->at(1);
	 second : DirectedRelationship = 
			getInputs(aClass)->at(2);}]

	// begin stream definition
	DataStream<[getOutputsConveyed(aClass)->first()/]>
		[getOutputNames(aClass)->first()/] = 
	[first.eGet('name')/]
	[if first.hasStereotype('KeyedStream') ]
      	.keyBy("[getStereotypeProperty(first,
				'KeyedStream', 'key')
	.eGet('name')/]")
	[elseif first.hasStereotype('BroadcastedStream')]
	.broadcast()
      	[/if]
	.connect(
	[second.eGet('name')/]
	[if second.hasStereotype('KeyedStream') ]
      	.keyBy("[getStereotypeProperty(second,
				'KeyedStream', 'key')
	.eGet('name')/]")
	[elseif second.hasStereotype('BroadcastedStream')]
	.broadcast()
      	[/if]
	)
	.map(new [aClass.name/]())
	[if getParallelism(aClass, 'NMapTransformation')
				.toString().toInteger() > 1 ]
	.setParallelism([getParallelism(aClass,
				'NMapTransformation')/]);
	[else]
	;
	[/if]

	[if(aClass.getModel()
		  .eAllContents(DirectedRelationship)
			->exists(stream|hasStereotype(stream,
				'PrivacyProtectingStream')))]
	app.getStreamByID("[getOutputNames(aClass)->
						first()/]")
	   .setConcreteStream([getOutputNames(aClass)->
						first()/]);
	[/if]
	// finish stream definition
[/template]
