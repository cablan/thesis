[comment encoding = UTF-8 /]
[module generateSparkTransformations('http://www.eclipse.org/emf/2002/Ecore', 'http://www.eclipse.org/uml2/5.0.0/UML')]

[import streamgen::main::queryUtils/]
 
[template public generateSparkMapTransformation(aClass : Class)]
	   JavaDStream<[getOutputsConveyed(aClass)->first()/]> [getOutputNames()->first()/] = [getInputNames()->first()/]
		  	.repartition([getStereotypeProperty(aClass, 'MapTransformation', 'parallelism')/])
			.map(new [aClass.name/]());
[/template]

[template public generateSparkFlatmapTransformation(aClass : Class)]
	   JavaDStream<[getOutputsConveyed(aClass)->first()/]> [getOutputNames()->first()/] = [getInputNames()->first()/]
		  	.repartition([getStereotypeProperty(aClass, 'FlatmapTransformation', 'parallelism')/])
			.flatMap(new [aClass.name/]());
[/template]

[template public generateSparkReduceTransformation(aClass : Class)]
[/template]

[template public generateSparkFilterTransformation(aClass : Class)]
	   JavaDStream<[getOutputsConveyed(aClass)->first()/]> [getOutputNames()->first()/] = [getInputNames()->first()/]
		  	.repartition([getStereotypeProperty(aClass, 'FilterTransformation', 'parallelism')/])
			.filter(([getInputsConveyed(aClass) ->first()/] tuple) -> [getStereotypeProperty(aClass, 'FilterTransformation', 'filteringCondition')/]);
[/template]

[template public generateSparkJoinTransformation(aClass : Class)]
[/template]

[template public generateSparkSumTransformation(aClass : Class)
	{input : DirectedRelationship = getInputs(aClass)->first();}]
			[if input.hasStereotype('KeyedStream') ]
		
				JavaPairDStream<[getStereotypeProperty(input, 'KeyedStream', 'key').eGet('type').eGet('name')/], [getInputsConveyed(aClass)->first()/]> keyed[getInputNames(aClass)->first().toUpperFirst()/] = 
					[getInputNames(aClass)->first()/]
						.mapToPair((x -> new Tuple2<>(x.get[getStereotypeProperty(input,'KeyedDataStream', 'key').toString().toUpperFirst()/](), x)));
				[if hasStereotype(aClass, 'WindowedStream')]
						JavaDStream<[getOutputsConveyed(aClass)->first()/]> [getOutputNames(aClass)->first().toUpperFirst()/] =
		 				keyed[getInputNames(aClass)->first().toUpperFirst()/]
							.reduceByKeyAndWindow(((i1, i2) -> new [getOutputsConveyed(aClass)->first()/](
								i1.get[getStereotypeProperty(input,'KeyedStream', 'key').eGet('name').toString().toUpperFirst()/](),
		 						i1.get[getStereotypeProperty(aClass,'SumTransformation', 'field').eGet('name').toString().toUpperFirst()/]() + i2.get[getStereotypeProperty(aClass,'SumTransformation', 'field').eGet('name').toString().toUpperFirst()/]())),
							[if getStereotypeProperty(input,'WindowedStream', 'window').eGet('isSliding') = false]
							Durations.[getStereotypeProperty(input,'WindowedStream', 'window').eGet('size').eGet('timeUnit').toString().toLower()/]([getStereotypeProperty(input,'WindowedStream', 'window').eGet('size').eGet('size')/]),
			 				Durations.[getStereotypeProperty(input,'WindowedStream', 'window').eGet('size').eGet('timeUnit').toString().toLower()/]([getStereotypeProperty(input,'WindowedStream', 'window').eGet('size').eGet('size')/])
				            [else] 
							Durations.[getStereotypeProperty(input,'WindowedStream', 'window').eGet('size').eGet('timeUnit').toString().toLower()/]([getStereotypeProperty(input,'WindowedStream', 'window').eGet('size').eGet('size')/]),
			 				Durations.[getStereotypeProperty(input,'WindowedStream', 'window').eGet('slideSize').eGet('timeUnit').toString().toLower()/]([getStereotypeProperty(input,'WindowedStream', 'window').eGet('slideSize').eGet('size')/])[/if], [getStereotypeProperty(aClass, 'SumTransformation', 'parallelism')/]).map(x -> x._2); 


				[else]
				[comment case in which the input is keyed but now windowedth/]
		Function2<List<[getOutputsConveyed(aClass)->first()/]>, 
				Optional<[getOutputsConveyed(aClass)->first()/]>, 
				Optional<[getOutputsConveyed(aClass)->first()/]>> updateFunction = new Function2<List<[getOutputsConveyed(aClass)->first()/]>, 
																											Optional<[getOutputsConveyed(aClass)->first()/]>, 
																											Optional<[getOutputsConveyed(aClass)->first()/]>>() {
			public Optional<[getOutputsConveyed(aClass)->first()/]> call(List<[getOutputsConveyed(aClass)->first()/]> values, Optional<[getOutputsConveyed(aClass)->first()/]> state) {
				[getOutputsConveyed(aClass)->first()/] updated= null;
				if(state.isPresent()) {
					updated = state.get();
					if(values.size() > 0) {
						for ([getOutputsConveyed(aClass)->first()/] i : values) {
							updated.set[getStereotypeProperty(aClass,'SumTransformation', 'field').eGet('name').toString().toUpperFirst()/](updated.get[getStereotypeProperty(aClass,'SumTransformation', 'field').eGet('name').toString().toUpperFirst()/]() + i.get[getStereotypeProperty(aClass,'SumTransformation', 'field').eGet('name').toString().toUpperFirst()/]());
						}	
						
					}
					
					return Optional.of(updated);
				}
				else {
					if(values.size() > 0) {
						updated = new [getOutputsConveyed(aClass)->first()/]();
						for ([getOutputsConveyed(aClass)->first()/] i : values) {
							updated.setCount(updated.get[getStereotypeProperty(aClass,'SumTransformation', 'field').eGet('name').toString().toUpperFirst()/]() + i.get[getStereotypeProperty(aClass,'SumTransformation', 'field').eGet('name').toString().toUpperFirst()/]());
						}	
						return Optional.of(updated);
					} else {
						return Optional.of(null);
					}
				}
		
			}
		};
		
       JavaDStream<[getOutputsConveyed(aClass)->first()/]> [getOutputNames(aClass)->first()/] =
        	keyed[getInputNames(aClass)->first()/].repartition([getStereotypeProperty(aClass, 'SumTransformation', 'parallelism')/]).updateStateByKey(updateFunction)
        	.map(x -> x._2);	

				[/if]
			[else]
			[comment case in which the input is not keyed but may be windowed/]
				[if hasStereotype(aClass, 'WindowedDataStream')]
						[comment case in which the input is not keyed but windowed/]
						JavaDStream<[getOutputsConveyed(aClass)->first()/]> [getOutputNames(aClass)->first()/] =
		 				[getInputNames(aClass)->first()/]
							.reduceByWindow(((i1, i2) -> {i1.set[getStereotypeProperty(aClass, 'SumTransformation', 'field').eGet('name').toString().toUpperFirst()/](i1.get[getStereotypeProperty(aClass, 'SumTransformation', 'field').eGet('name').toString().toUpperFirst()/]() + i2.get[getStereotypeProperty(aClass, 'SumTransformation', 'field').eGet('name').toString().toUpperFirst()/]()); return i1;}),
							[if getStereotypeProperty(aClass, 'WindowedStream', 'window').eGet('isSliding') = false]
							Durations.[getStereotypeProperty(aClass, 'WindowedStream', 'window').eGet('size').eGet('timeUnit').toString().toLower()/]([getStereotypeProperty(aClass, 'WindowedStream', 'window').eGet('size').eGet('size')/]),
			 				Durations.[getStereotypeProperty(aClass, 'WindowedStream', 'window').eGet('size').eGet('timeUnit').toString().toLower()/]([getStereotypeProperty(aClass, 'WindowedStream', 'window').eGet('size').eGet('size')/])
				            [else] Durations.[getStereotypeProperty(aClass, 'WindowedStream', 'window').eGet('size').eGet('timeUnit').toString().toLower()/]([getStereotypeProperty(aClass, 'WindowedStream', 'window').eGet('size').eGet('size')/]),
			 				Durations.[getStereotypeProperty(aClass, 'WindowedStream', 'window').eGet('slideSize').eGet('timeUnit').toString().toLower()/]([getStereotypeProperty(aClass, 'WindowedStream', 'window').eGet('slideSize').eGet('size')/])[/if]); 


				[else]
						[comment case in which the input is not keyed and not windowed/]
				[/if]
			[/if]
[/template]

[template public generateSparkWindowTransformation(aClass : Class)
	{input : DirectedRelationship = getInputs(aClass)->first();}]
	[comment: the following if should be guaranteed by the constraints/]
	[if hasStereotype(input, 'WindowedStream')] 
		[if (hasStereotype(input, 'KeyedStream'))]
		JavaDStream<[getOutputsConveyed(aClass)->first()/]> [getOutputNames(aClass)->first()/] = [getInputNames(aClass)->first()/].map(x-> new Tuple2<>(x, System.currentTimeMillis()))
			.mapToPair((x -> new Tuple2<>(x._1.get[getStereotypeProperty(input,'KeyedStream', 'key').eGet('name').toString().toUpperFirst()/](), Arrays.asList(x))))
			.reduceByKeyAndWindow(new Function2<List<Tuple2<[getInputsConveyed(aClass)->first()/], Long>>, List<Tuple2<[getInputsConveyed(aClass)->first()/], Long>>, List<Tuple2<[getInputsConveyed(aClass)->first()/], Long>>>() {
				@Override 
				public List<Tuple2<[getInputsConveyed(aClass)->first()/], Long>> call(List<Tuple2<[getInputsConveyed(aClass)->first()/], Long>> v1, List<Tuple2<[getInputsConveyed(aClass)->first()/], Long>> v2) throws Exception {
					Set<Tuple2<[getInputsConveyed(aClass)->first()/], Long>> set = new HashSet<Tuple2<[getInputsConveyed(aClass)->first()/], Long>>();

					set.addAll(v1);
					set.addAll(v2);

					return new ArrayList<Tuple2<[getInputsConveyed(aClass)->first()/], Long>>(set);
				}
			}
			[if getStereotypeProperty(input, 'WindowedStream', 'window').eGet('isSliding') = false]
			, Durations.[getStereotypeProperty(input, 'WindowedStream', 'window').eGet('size').eGet('timeUnit').toString().toLower()/]([getStereotypeProperty(input, 'WindowedStream', 'window').eGet('size').eGet('size')/]),
			Durations.[getStereotypeProperty(input, 'WindowedStream', 'window').eGet('size').eGet('timeUnit').toString().toLower()/]([getStereotypeProperty(input, 'WindowedStream', 'window').eGet('size').eGet('size')/])
            [else] Durations.[getStereotypeProperty(input, 'WindowedStream', 'window').eGet('size').eGet('timeUnit').toString().toLower()/]([getStereotypeProperty(input, 'WindowedStream', 'window').eGet('size').eGet('size')/]),
			Durations.[getStereotypeProperty(input, 'WindowedStream', 'window').eGet('slideSize').eGet('timeUnit').toString().toLower()/]([getStereotypeProperty(input, 'WindowedStream', 'window').eGet('slideSize').eGet('size')/])[/if])
			.flatMap(new [aClass.name/]());
		[else]
		JavaDStream<[getOutputsConveyed(aClass)->first()/]> [getOutputNames(aClass)->first()/] = [getInputNames(aClass)->first()/].map(x-> new Tuple2<>(x, System.currentTimeMillis()))
			.map((x -> Arrays.asList(x)))
			.reduceByWindow(new Function2<List<Tuple2<[getInputsConveyed(aClass)->first()/], Long>>, List<Tuple2<[getInputsConveyed(aClass)->first()/], Long>>, List<Tuple2<[getInputsConveyed(aClass)->first()/], Long>>>() {
				@Override
				public List<Tuple2<[getInputsConveyed(aClass)->first()/], Long>> call(List<Tuple2<[getInputsConveyed(aClass)->first()/], Long>> v1, List<Tuple2<[getInputsConveyed(aClass)->first()/], Long>> v2) throws Exception {
					Set<Tuple2<[getInputsConveyed(aClass)->first()/], Long>> set = new HashSet<Tuple2<[getInputsConveyed(aClass)->first()/], Long>>();
					
					set.addAll(v1);
					set.addAll(v2);

					return new ArrayList<Tuple2<[getInputsConveyed(aClass)->first()/], Long>>(set);
				}

			},
			[if getStereotypeProperty(aClass, 'WindowedStream', 'window').eGet('isSliding') = false]
			Durations.[getStereotypeProperty(aClass, 'WindowedStream', 'window').eGet('size').eGet('timeUnit').toString().toLower()/]([getStereotypeProperty(aClass, 'WindowedStream', 'window').eGet('size').eGet('size')/]),
			Durations.[getStereotypeProperty(aClass, 'WindowedStream', 'window').eGet('size').eGet('timeUnit').toString().toLower()/]([getStereotypeProperty(aClass, 'WindowedStream', 'window').eGet('size').eGet('size')/])
            [else] Durations.[getStereotypeProperty(aClass, 'WindowedStream', 'window').eGet('size').eGet('timeUnit').toString().toLower()/]([getStereotypeProperty(aClass, 'WindowedStream', 'window').eGet('size').eGet('size')/]),
			Durations.[getStereotypeProperty(aClass, 'WindowedStream', 'window').eGet('slideSize').eGet('timeUnit').toString().toLower()/]([getStereotypeProperty(aClass, 'WindowedStream', 'window').eGet('slideSize').eGet('size')/])[/if])
			.flatMap(new [aClass.name/]());
		[/if]
	[/if]

[/template]