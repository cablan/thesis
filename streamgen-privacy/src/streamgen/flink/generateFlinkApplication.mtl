[comment encoding = UTF-8 /]
[module generateFlinkApplication('http://www.eclipse.org/emf/2002/Ecore', 'http://www.eclipse.org/uml2/5.0.0/UML')]

[import streamgen::main::queryUtils/]
[import streamgen::flink::generateFlinkSources/]
[import streamgen::flink::generateFlinkTransformations/]
[import streamgen::flink::generateFlinkSinks/]

[template public generateFlinkApplication(aModel : Model)]

[file (aModel.name.toLower().concat('/application/').concat(aModel.name.concat('.java')), false, 'UTF-8')]
package [aModel.name.toLower().concat('.application')/];

[for (p:Package | aModel.eContents(Package)) ]
  [if hasStereotype(p, 'StreamDatatypes')]
     [for (subc:DataType | p.eContents(DataType)) ]
import [aModel.name.toLower()/].datatypes.[subc.name/];
    [/for]
  [/if]
[/for]

[for (c:Class | aModel.eContents(Class)) ]
  [if c.getAppliedStereotypes()->asSequence()->exists(s | s.name.strstr('Transformation') and not (s.name = 'FilterTransformation') and not (s.name = 'SumTransformation'))]
import [aModel.name.toLower()/].functions.[c.name/];
  [/if]
[/for]

import java.util.*;
import java.util.concurrent.TimeUnit;
import org.apache.flink.api.common.JobExecutionResult;
import org.apache.flink.streaming.api.datastream.DataStream;
import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;
import org.apache.flink.streaming.api.windowing.time.Time;
import org.apache.flink.core.fs.FileSystem.WriteMode;

[if (aModel.eAllContents(Class) -> exists(c | hasStereotype(c, 'KafkaSource') or hasStereotype(c, 'KafkaSink')))]
import org.apache.flink.streaming.connectors.kafka.*;
import org.apache.flink.api.common.serialization.SimpleStringSchema;
[/if]

[if (aModel.eAllContents(Class) -> exists(c | hasStereotype(c, 'CassandraSink')))]
import org.apache.flink.streaming.connectors.cassandra.CassandraSink;
import com.datastax.driver.mapping.Mapper;
[/if]

[if (aModel.eAllContents(DirectedRelationship) -> exists(stream | hasStereotype(stream, 'PrivacyProtectingStream')))]
import org.apache.commons.io.FileUtils;
import java.io.File;
import org.yaml.snakeyaml.Yaml;
import it.deib.polimi.diaprivacy.library.GeneralizationFunction;
import it.deib.polimi.diaprivacy.library.ProtectedStream;
import it.deib.polimi.diaprivacy.model.ApplicationDataStream;
import it.deib.polimi.diaprivacy.model.ApplicationPrivacy;
import it.deib.polimi.diaprivacy.model.DSEP;
import it.deib.polimi.diaprivacy.model.PrivacyContext;
import it.deib.polimi.diaprivacy.library.PrivacyContextParser;
import it.deib.polimi.diaprivacy.model.VCP;
import it.deib.polimi.diaprivacy.library.PrivacyContextFixedSource;
[/if]


public class [aModel.name/] {

    public static void main(String['['/][']'/] args) throws Exception {
		
		[comment Streamgen Environment Configuration/]
		final StreamExecutionEnvironment env = StreamExecutionEnvironment
               .getExecutionEnvironment();
       
       //uncomment the below if you want to set the default parallelism for the project.
       //env.setParallelism(1);

[comment StreamGen Privacy Policies Sources/]
[if (aModel.eAllContents(DirectedRelationship) -> exists(stream | hasStereotype(stream, 'PrivacyProtectingStream')))]
			// privacy init
[for (c:Package | aModel.eContents(Package)) ]
[if hasStereotype(c, 'PrivacyPolicySources')]
	[for (subc:Class | c.eContents(Class)) ]
		[if hasStereotype(subc, 'PrivPolYamlFileSource')]
		[generateFlinkPrivacyPolicyYamlFileSource(subc)/]
		[elseif hasStereotype(subc, 'PrivContFixedSource')]
		[generateFlinkPrivacyContextFixedSource(subc)/]
		[elseif hasStereotype(subc, 'PrivContKafkaSource')]
		[generateFlinkPrivacyContextKafkaSource(subc)/]
		[elseif hasStereotype(subc, 'PrivContTextFileSource')]
		[generateFlinkPrivacyContextTextFileSource(subc)/]
		[elseif hasStereotype(subc, 'PrivContSocketSource')]
		[generateFlinkPrivacyContextSocketSource(subc)/]
	  	[/if]
	[/for]
[/if]
[/for]
			// finish privacy init
[/if]


[for (c:Class | aModel.eContents(Class)) ]
	[if hasStereotype(c, 'SocketSource')]
		[generateFlinkSocketSource(c)/]
	[elseif (hasStereotype(c, 'TextFileSource'))]
		[generateFlinkTextFileSource(c)/]
	[elseif (hasStereotype(c, 'KafkaSource'))]
		[generateFlinkKafkaSource(c)/]
	[elseif (hasStereotype(c, 'MapTransformation'))]
		[if  hasStereotype(getInputs(c)->first(), 'PrivacyProtectingStream')]
		[generateFlinkPrivPolicies(getInputs(c)->first())/]
		[/if]
		[generateFlinkMapTransformation(c)/]
	[elseif (hasStereotype(c, 'FlatmapTransformation'))]
		[if  hasStereotype(getInputs(c)->first(), 'PrivacyProtectingStream')]
		[generateFlinkPrivPolicies(getInputs(c)->first())/]
		[/if]
		[generateFlinkFlatmapTransformation(c)/]
	[elseif (hasStereotype(c, 'NFlatmapTransformation'))]
		[if  hasStereotype(getInputs(c)->at(1), 'PrivacyProtectingStream') or hasStereotype(getInputs(c)->at(2), 'PrivacyProtectingStream')]
		[generateFlinkPrivPolicies(getInputs(c)->first())/]
		[/if]
		[generateFlinkCoFlatmapTransformation(c)/]
	[elseif (hasStereotype(c, 'NMapTransformation'))]
		[if  hasStereotype(getInputs(c)->at(1), 'PrivacyProtectingStream') or hasStereotype(getInputs(c)->at(2), 'PrivacyProtectingStream')]
		[generateFlinkPrivPolicies(getInputs(c)->first())/]
		[/if]
		[generateFlinkCoMapTransformation(c)/]
	[elseif (hasStereotype(c, 'SumTransformation'))]
		[if  hasStereotype(getInputs(c)->at(1), 'PrivacyProtectingStream') or hasStereotype(getInputs(c)->at(2), 'PrivacyProtectingStream')]
		[generateFlinkPrivPolicies(getInputs(c)->first())/]
		[/if]
		[generateFlinkSumTransformation(c)/]
	[elseif (hasStereotype(c, 'FilterTransformation'))]
		[if  hasStereotype(getInputs(c)->first(), 'PrivacyProtectingStream')]
		[generateFlinkPrivPolicies(getInputs(c)->first())/]
		[/if]
		[generateFlinkFilterTransformation(c)/]
	[elseif (hasStereotype(c, 'WindowTransformation'))]
		[if  hasStereotype(getInputs(c)->first(), 'PrivacyProtectingStream')]
		[generateFlinkPrivPolicies(getInputs(c)->first())/]
		[/if]
		[generateFlinkWindowTransformation(c)/]
	[elseif (hasStereotype(c, 'KafkaSink'))]
		[if  hasStereotype(getInputs(c)->first(), 'PrivacyProtectingStream')]
		[generateFlinkPrivPolicies(getInputs(c)->first())/]
		[/if]
		[generateFlinkKafkaSink(c)/]
	[elseif (hasStereotype(c, 'CassandraSink'))]
		[if  hasStereotype(getInputs(c)->first(), 'PrivacyProtectingStream')]
		[generateFlinkPrivPolicies(getInputs(c)->first())/]
		[/if]
		[generateFlinkCassandraSink(c)/]
	[elseif (hasStereotype(c, 'CsvFileSink'))]
		[if  hasStereotype(getInputs(c)->first(), 'PrivacyProtectingStream')]
		[generateFlinkPrivPolicies(getInputs(c)->first())/]
		[/if]
		[generateFlinkCsvFileSink(c)/]
	[elseif (hasStereotype(c, 'TextFileSink'))]
		[if  hasStereotype(getInputs(c)->first(), 'PrivacyProtectingStream')]
		[generateFlinkPrivPolicies(getInputs(c)->first())/]
		[/if]
		[generateFlinkTextFileSink(c)/]
	[elseif (hasStereotype(c, 'DuplicatedStreamKafkaSink'))]
		[generateFlinkKafkaSink(c)/]
	[elseif (hasStereotype(c, 'DuplicatedStreamCassandraSink'))]
		[generateFlinkCassandraSink(c)/]
	[elseif (hasStereotype(c, 'DuplicatedStreamCsvFileSink'))]
		[generateFlinkCsvFileSink(c)/]
	[elseif (hasStereotype(c, 'DuplicatedStreamTextFileSink'))]
		[generateFlinkTextFileSink(c)/]
	[/if]
[/for]

       JobExecutionResult result = env.execute();
       System.out.println("EXECUTION TIME: " + result.getNetRuntime(TimeUnit.SECONDS));

    }
}
[/file]
[/template]