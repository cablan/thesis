[comment encoding = UTF-8 /]
[module generateFlinkTransformations('http://www.eclipse.org/emf/2002/Ecore', 'http://www.eclipse.org/uml2/5.0.0/UML')]

[import streamgen::main::queryUtils/]

[template public generateFlinkMapTransformation(aClass : Class) 
	{input : DirectedRelationship = getInputs(aClass)->first();}]

	// begin stream definition
	DataStream<[getOutputsConveyed(aClass) ->first()/]> [getOutputNames(aClass)->first()/] = 
		[if input.hasStereotype('PrivacyProtectingStream')]
		[input.eGet('name')/]_f
		[else]
		[input.eGet('name')/]
		[/if]
		[if input.hasStereotype('KeyedStream') ]
      	.keyBy("[getStereotypeProperty(input, 'KeyedStream', 'key').eGet('name')/]")
      	[/if]
		.map(new [aClass.name/]())
		[if getParallelism(aClass, 'MapTransformation') > 1 ]
		.setParallelism([getParallelism(aClass, 'MapTransformation')/]);
		[else]
		;
		[/if]

	[if (aClass.getModel().eAllContents(DirectedRelationship) -> exists(stream | hasStereotype(stream, 'PrivacyProtectingStream')))]
	app.getStreamByID("[getOutputNames(aClass)->first()/]").setConcreteStream([getOutputNames(aClass)->first()/]);
	[/if]
	// finish stream definition
[/template]

[template public generateFlinkFlatmapTransformation(aClass : Class)
	{input : DirectedRelationship = getInputs(aClass)->first();}]

	// begin stream definition
	DataStream<[getOutputsConveyed(aClass) ->first()/]> [getOutputNames(aClass)->first()/] =
		[if input.hasStereotype('PrivacyProtectingStream')]
		[input.eGet('name')/]_f
		[else]
		[input.eGet('name')/]
		[/if]
		[if input.hasStereotype('KeyedStream') ]
      	.keyBy("[getStereotypeProperty(input, 'KeyedStream', 'key').eGet('name')/]")
      	[/if]
		.flatMap(new [aClass.name/]())
		[if getParallelism(aClass, 'FlatmapTransformation').toString().toInteger() > 1 ]
		.setParallelism([getParallelism(aClass, 'FlatmapTransformation')/]);
		[else]
		;
		[/if]

	[if (aClass.getModel().eAllContents(DirectedRelationship) -> exists(stream | hasStereotype(stream, 'PrivacyProtectingStream')))]
	app.getStreamByID("[getOutputNames(aClass)->first()/]").setConcreteStream([getOutputNames(aClass)->first()/]);
	[/if]
	// finish stream definition
[/template]

[template public generateFlinkCoFlatmapTransformation(aClass : Class)
	{first : DirectedRelationship = getInputs(aClass)->at(1);
	 second : DirectedRelationship = getInputs(aClass)->at(2);}]

	// begin stream definition
	DataStream<[getOutputsConveyed(aClass) ->first()/]> [getOutputNames(aClass)->first()/] = [first.eGet('name')/]
		[if first.hasStereotype('KeyedStream') ]
      	.keyBy("[getStereotypeProperty(first, 'KeyedStream', 'key').eGet('name')/]")
		[elseif first.hasStereotype('BroadcastedStream')]
		.broadcast()
      	[/if]
		.connect(
		[second.eGet('name')/]
		[if second.hasStereotype('KeyedStream') ]
      	.keyBy("[getStereotypeProperty(second, 'KeyedStream', 'key').eGet('name')/]")
		[elseif second.hasStereotype('BroadcastedStream')]
		.broadcast()
      	[/if]
		)
		.flatMap(new [aClass.name/]())
		[if getParallelism(aClass, 'NFlatmapTransformation').toString().toInteger() > 1 ]
		.setParallelism([getParallelism(aClass, 'FlatmapTransformation')/]);
		[else]
		;
		[/if]

	[if (aClass.getModel().eAllContents(DirectedRelationship) -> exists(stream | hasStereotype(stream, 'PrivacyProtectingStream')))]
	app.getStreamByID("[getOutputNames(aClass)->first()/]").setConcreteStream([getOutputNames(aClass)->first()/]);
	[/if]
	// finish stream definition
[/template]

[template public generateFlinkCoMapTransformation(aClass : Class)
	{first : DirectedRelationship = getInputs(aClass)->at(1);
	 second : DirectedRelationship = getInputs(aClass)->at(2);}]

	// begin stream definition
	DataStream<[getOutputsConveyed(aClass) ->first()/]> [getOutputNames(aClass)->first()/] = [first.eGet('name')/]
		[if first.hasStereotype('KeyedStream') ]
      	.keyBy("[getStereotypeProperty(first, 'KeyedStream', 'key').eGet('name')/]")
		[elseif first.hasStereotype('BroadcastedStream')]
		.broadcast()
      	[/if]
		.connect(
		[second.eGet('name')/]
		[if second.hasStereotype('KeyedStream') ]
      	.keyBy("[getStereotypeProperty(second, 'KeyedStream', 'key').eGet('name')/]")
		[elseif second.hasStereotype('BroadcastedStream')]
		.broadcast()
      	[/if]
		)
		.map(new [aClass.name/]())
		[if getParallelism(aClass, 'NMapTransformation').toString().toInteger() > 1 ]
		.setParallelism([getParallelism(aClass, 'NMapTransformation')/]);
		[else]
		;
		[/if]

		[if (aClass.getModel().eAllContents(DirectedRelationship) -> exists(stream | hasStereotype(stream, 'PrivacyProtectingStream')))]
		app.getStreamByID("[getOutputNames(aClass)->first()/]").setConcreteStream([getOutputNames(aClass)->first()/]);
		[/if]
		// finish stream definition
[/template]

[template public generateFlinkReduceTransformation(aClass : Class)]
[/template]

[template public generateFlinkFilterTransformation(aClass : Class)
	{input : DirectedRelationship = getInputs(aClass)->first();}]

	// begin stream definition
	DataStream<[getOutputsConveyed(aClass) ->first()/]> [getOutputNames(aClass)->first()/] =
		[if input.hasStereotype('PrivacyProtectingStream')]
		[input.eGet('name')/]_f
		[else]
		[input.eGet('name')/]
		[/if]
		[if input.hasStereotype('KeyedStream') ]
      	.keyBy("[getStereotypeProperty(input, 'KeyedStream', 'key').eGet('name')/]")
      	[/if]
		.filter(([getInputsConveyed(aClass) ->first()/] tuple) -> [getStereotypeProperty(aClass, 'FilterTransformation', 'filteringCondition')/])
		[if getParallelism(aClass, 'FilterTransformation').toString().toInteger() > 1 ]
		.setParallelism([getParallelism(aClass, 'FilterTransformation')/]);
		[else]
		;
		[/if]

	[if (aClass.getModel().eAllContents(DirectedRelationship) -> exists(stream | hasStereotype(stream, 'PrivacyProtectingStream')))]
	app.getStreamByID("[getOutputNames(aClass)->first()/]").setConcreteStream([getOutputNames(aClass)->first()/]);
	[/if]
	// finish stream definition
[/template]

[template public generateFlinkJoinTransformation(aClass : Class)]
[/template]

[template public generateFlinkWindowTransformation(aClass : Class)
	{input : DirectedRelationship = getInputs(aClass)->first();}]

	// begin stream definition
	DataStream<[getOutputsConveyed(aClass) ->first()/]> [getOutputNames(aClass)->first()/] =
		[if input.hasStereotype('PrivacyProtectingStream')]
		[input.eGet('name')/]_f
		[else]
		[input.eGet('name')/]
		[/if]
		[if input.hasStereotype('KeyedStream') ]
      	.keyBy("[getStereotypeProperty(input, 'KeyedStream', 'key').eGet('name')/]")
      	[/if] 
		[if input.hasStereotype('WindowedStream') ] [comment -- this should be actually guaranteed by the OCL constraint. /]
            [if input.getStereotypeProperty('WindowedStream', 'window').eGet('isSessionInEventTime').toString().toBoolean() = true]
		.timeWindow[if input.hasStereotype('NonParallelStream')]All[/if](EventTimeSessionWindows.withGap(Time.[input.getStereotypeProperty('WindowedStream', 'window').eGet('size').eGet('timeUnit').toString().toLower()/]([input.getStereotypeProperty('WindowedStream', 'window').eGet('size').eGet('size')/])))
			[elseif input.getStereotypeProperty('WindowedStream', 'window').eGet('isSessionInProcessingTime').toString().toBoolean() = true]
        .timeWindow[if input.hasStereotype('NonParallelStream')]All[/if](ProcesingTimeSessionWindows.withGap(Time.[input.getStereotypeProperty('WindowedStream', 'window').eGet('size').eGet('timeUnit').toString().toLower()/]([input.getStereotypeProperty('WindowedStream', 'window').eGet('size').eGet('size')/])))
            [else]
              [if input.getStereotypeProperty('WindowedStream', 'window').eGet('isSliding').toString().toBoolean() = false]
        .timeWindow[if input.hasStereotype('NonParallelStream')]All[/if](Time.[input.getStereotypeProperty('WindowedStream', 'window').eGet('size').eGet('timeUnit').toString().toLower()/]([input.getStereotypeProperty('WindowedStream', 'window').eGet('size').eGet('size')/]))
              [else]
        .timeWindow[if input.hasStereotype('NonParallelStream')]All[/if](Time.[input.getStereotypeProperty('WindowedStream', 'window').eGet('size').eGet('timeUnit').toString().toLower()/]([input.getStereotypeProperty('WindowedStream', 'window').eGet('size').eGet('size')/]),Time.[input.getStereotypeProperty('WindowedStream', 'window').eGet('slideSize').eGet('timeUnit').toString().toLower()/]([input.getStereotypeProperty('WindowedStream', 'window').eGet('slideSize').eGet('size')/]))          
              [/if]
            [/if]
      	[/if] 
        .apply(new [aClass.name/]())
		[if getParallelism(aClass, 'WindowTransformation') > 1 ]
		.setParallelism([getParallelism(aClass, 'WindowTransformation')/]);
		[else]
		;
		[/if]

	[if (aClass.getModel().eAllContents(DirectedRelationship) -> exists(stream | hasStereotype(stream, 'PrivacyProtectingStream')))]
	app.getStreamByID("[getOutputNames(aClass)->first()/]").setConcreteStream([getOutputNames(aClass)->first()/]);
	[/if]
	// finish stream definition
[/template]

[template public generateFlinkSumTransformation(aClass : Class)
	{input : DirectedRelationship = getInputs(aClass)->first();}]

	// begin stream definition
	DataStream<[getOutputsConveyed(aClass) ->first()/]> [getOutputNames(aClass)->first()/] =
		[if input.hasStereotype('SecureStream')]
		[input.eGet('name')/]_f
		[else]
		[input.eGet('name')/]
		[/if]
		[if input.hasStereotype('KeyedStream') ]
      	.keyBy("[getStereotypeProperty(input, 'KeyedStream', 'key').eGet('name')/]")
      	[/if] 
		[if input.hasStereotype('WindowedStream') ] [comment -- this should be actually guaranteed by the OCL constraint. /]
            [if input.getStereotypeProperty('WindowedStream', 'window').eGet('isSessionInEventTime').toString().toBoolean() = true]
		.timeWindow[if input.hasStereotype('NonParallelStream')]All[/if](EventTimeSessionWindows.withGap(Time.[input.getStereotypeProperty('WindowedStream', 'window').eGet('size').eGet('timeUnit').toString().toLower()/]([input.getStereotypeProperty('WindowedStream', 'window').eGet('size').eGet('size')/])))
			[elseif input.getStereotypeProperty('WindowedStream', 'window').eGet('isSessionInProcessingTime').toString().toBoolean() = true]
        .timeWindow[if input.hasStereotype('NonParallelStream')]All[/if](ProcesingTimeSessionWindows.withGap(Time.[input.getStereotypeProperty('WindowedStream', 'window').eGet('size').eGet('timeUnit').toString().toLower()/]([input.getStereotypeProperty('WindowedStream', 'window').eGet('size').eGet('size')/])))
            [else]
              [if input.getStereotypeProperty('WindowedStream', 'window').eGet('isSliding').toString().toBoolean() = false]
        .timeWindow[if input.hasStereotype('NonParallelStream')]All[/if](Time.[input.getStereotypeProperty('WindowedStream', 'window').eGet('size').eGet('timeUnit').toString().toLower()/]([input.getStereotypeProperty('WindowedStream', 'window').eGet('size').eGet('size')/]))
              [else]
        .timeWindow[if input.hasStereotype('NonParallelStream')]All[/if](Time.[input.getStereotypeProperty('WindowedStream', 'window').eGet('size').eGet('timeUnit').toString().toLower()/]([input.getStereotypeProperty('WindowedStream', 'window').eGet('size').eGet('size')/]),Time.[input.getStereotypeProperty('WindowedStream', 'window').eGet('slideSize').eGet('timeUnit').toString().toLower()/]([input.getStereotypeProperty('WindowedStream', 'window').eGet('slideSize').eGet('size')/]))          
              [/if]
            [/if]
      	[/if] 
		.sum("[getStereotypeProperty(aClass, 'SumTransformation', 'field').eGet('name')/]")
		[if getParallelism(aClass, 'SumTransformation') > 1 ]
		.setParallelism([getParallelism(aClass, 'SumTransformation')/]);
		[else]
		;
		[/if]
	
	[if (aClass.getModel().eAllContents(DirectedRelationship) -> exists(stream | hasStereotype(stream, 'PrivacyProtectingStream')))]
	app.getStreamByID("[getOutputNames(aClass)->first()/]").setConcreteStream([getOutputNames(aClass)->first()/]);
	[/if]
	// finish stream definition
[/template]

[template public generateFlinkPrivPolicies(stream : DirectedRelationship)]
	
	// begin stream privacy conf
	ApplicationDataStream app_[stream.eGet('name')/] = app.getStreamByID("[stream.eGet('name')/]");
			
	ProtectedStream<[stream.eGet('conveyed').name/]> [stream.eGet('name')/]_p = 
		new ProtectedStream<[stream.eGet('conveyed').name/]>([getStereotypeProperty(stream, 'PrivacyProtectingStream', 'protectedStreamConf').eGet('monitoringActive').toString().toBoolean()/],"[getStereotypeProperty(stream, 'PrivacyProtectingStream', 'protectedStreamConf').eGet('timestampServerIp').toString()/]",[getStereotypeProperty(stream, 'PrivacyProtectingStream', 'protectedStreamConf').eGet('timestampServerPort').toString().toInteger()/],[getStereotypeProperty(stream, 'PrivacyProtectingStream', 'protectedStreamConf').eGet('topologyParallelism').toString().toInteger()/],[getStereotypeProperty(stream, 'PrivacyProtectingStream', 'protectedStreamConf').eGet('simulateRealisticScenario').toString().toBoolean()/],[getStereotypeProperty(stream, 'PrivacyProtectingStream', 'protectedStreamConf').eGet('allowedLateness').toString().toInteger()/],"[getStereotypeProperty(stream, 'PrivacyProtectingStream', 'protectedStreamConf').eGet('logDir').toString()/]");
	
	[stream.eGet('name')/]_p.setStreamToProtect((DataStream<[stream.eGet('conveyed').name/]>) app_[stream.eGet('name')/].getConcreteStream());
	[if isVCPprotected(stream)]
	
		for (VCP vcp : app.getVCPs(app_[stream.eGet('name')/].getId())) {
			[stream.eGet('name')/]_p.addVCP(app_[stream.eGet('name')/], (VCP) vcp, app);
		}
	[/if]
	[if (isDSEPprotected(stream))]
	
		for (DSEP dsep : app.getDSEPs(app_[stream.eGet('name')/].getId())) {
			[stream.eGet('name')/]_p.addDSEP(app_[stream.eGet('name')/], (DSEP) dsep, app);
		}
	[/if]
	
	DataStream<[stream.eGet('conveyed').name/]> [stream.eGet('name')/]_f = [stream.eGet('name')/]_p.finalize(env, contextStream);
	// finish stream privacy conf
[/template]