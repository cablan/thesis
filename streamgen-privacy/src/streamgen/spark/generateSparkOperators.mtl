[comment encoding = UTF-8 /]
[module generateSparkOperators('http://www.eclipse.org/emf/2002/Ecore', 'http://www.eclipse.org/uml2/5.0.0/UML')]
[import streamgen::main::queryUtils /]


[template public generateSparkMapFunction(aClass : Class)]
[file (aClass.getModel().name.toLower().concat('/functions/').concat(aClass.name).concat('.java'), false)]
package [aClass.getModel().name.toLower().concat('.functions')/];

   [for (p:Package | aClass.getModel().eContents(Package)) ]
    [if hasStereotype(p, 'StreamDatatypes')]
      [for (subc:DataType | p.eContents(DataType)) ]
import [aClass.getModel().name.toLower()/].datatypes.[subc.name/];
      [/for]
    [/if]
  [/for]


import org.apache.spark.api.java.function.Function;


public class [aClass.name.toUpperFirst()/] implements Function<[getInputsConveyed(aClass)->first()/], [getOutputsConveyed(aClass)->first()/]>{

	private static final long serialVersionUID = 1L;

	@Override
	public [getOutputsConveyed(aClass)->first()/] call([getInputsConveyed(aClass)->first()/] tuple) throws Exception {
		[getStereotypeProperty(aClass, 'MapTransformation', 'mapFunction')/]
	}

}

[/file]
[/template]

[template public generateSparkFlatmapFunction(aClass : Class)]
[file (aClass.getModel().name.toLower().concat('/functions/').concat(aClass.name).concat('.java'), false)]
package [aClass.getModel().name.toLower().concat('.functions')/];

   [for (p:Package | aClass.getModel().eContents(Package)) ]
    [if hasStereotype(p, 'StreamDatatypes')]
      [for (subc:DataType | p.eContents(DataType)) ]
import [aClass.getModel().name.toLower()/].datatypes.[subc.name/];
      [/for]
    [/if]
  [/for]


import org.apache.spark.api.java.function.FlatMapFunction;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

public class [aClass.name.toUpperFirst()/] implements FlatMapFunction<[getInputsConveyed(aClass)->first()/], [getOutputsConveyed(aClass)->first()/]> {

	private static final long serialVersionUID = 1L;

	@Override
	public Iterator<[getOutputsConveyed(aClass)->first()/]> call([getInputsConveyed(aClass)->first()/] tuple) throws Exception {		
		List<[getOutputsConveyed(aClass)->first()/]> out = new ArrayList<[getOutputsConveyed(aClass)->first()/]>();
		
 		[getStereotypeProperty(aClass, 'FlatmapTransformation', 'flatmapFunction').toString().replace('collect', 'add')/]        
        return out.iterator();

	}
}
[/file]
[/template]

[template public generateSparkWindowFunction(aClass : Class)
	{input : DirectedRelationship = getInputs(aClass)->first();}]
[file (aClass.getModel().name.toLower().concat('/functions/').concat(aClass.name).concat('.java'), false)]
package [aClass.getModel().name.toLower().concat('.functions')/];

   [for (p:Package | aClass.getModel().eContents(Package)) ]
    [if hasStereotype(p, 'StreamDatatypes')]
      [for (subc:DataType | p.eContents(DataType)) ]
import [aClass.getModel().name.toLower()/].datatypes.[subc.name/];
      [/for]
    [/if]
  [/for]


import org.apache.spark.api.java.function.FlatMapFunction;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

[if hasStereotype(input, 'KeyedStream')]
import scala.Tuple2;

public class [aClass.name.toUpperFirst()/] implements FlatMapFunction<Tuple2<String, List<Tuple2<[getInputsConveyed(aClass)->first()/], Long>>>,[getOutputsConveyed(aClass)->first()/]>{

private static final long serialVersionUID = 1L;

@Override
public Iterator<[getOutputsConveyed(aClass)->first()/]> call(Tuple2<[getStereotypeProperty(input, 'KeyedStream', 'key').eGet('type').eGet('name')/], List<Tuple2<[getInputsConveyed(aClass)->first()/], Long>>> t) throws Exception {


	List<[getInputsConveyed(aClass)->first()/]> windowContent = new  ArrayList<[getInputsConveyed(aClass)->first()/]>();
	
	for(Tuple2<[getInputsConveyed(aClass)->first()/], Long> x: t._2) {
		windowContent.add(x._1);
	}

	[getStereotypeProperty(input, 'KeyedStream', 'key').eGet('type').eGet('name')/] key = t._1;
	List<[getOutputsConveyed(aClass)->first()/]> out= new ArrayList<[getOutputsConveyed(aClass)->first()/]>();

	Window window = new Window();
	
	window.setStart(t._2.get(0)._2);
	window.setEnd(t._2.get(t._2.size())._2);

	
	[getStereotypeProperty(aClass, 'WindowTransformation', 'windowFunction').toString().substituteAll('collect', 'add')/]        
	
	return out.iterator();
}

private class Window {
	private long startTime;
	private long endTime;
	
	public long getEnd() {
		return this.endTime;
	}
	
	public long getStart() {
		return this.startTime;
	}
	
	public void setStart(long startTime) {
		this.startTime = startTime;
	}
	
	public void setEnd(long endTime) {
		this.endTime = endTime;
	}	
	
}

}
[else]
public class [aClass.name.toUpperFirst()/] implements FlatMapFunction<List<[getInputsConveyed(aClass)->first()/]>,[getOutputsConveyed(aClass)->first()/]>{

private static final long serialVersionUID = 1L;

@Override
public Iterator<WordCount> call(List<[getInputsConveyed(aClass)->first()/]> t) throws Exception {

	List<[getInputsConveyed(aClass)->first()/]> windowContent = t;
	List<[getOutputsConveyed(aClass)->first()/]> out= new ArrayList<[getOutputsConveyed(aClass)->first()/]>();
	
	[getStereotypeProperty(aClass, 'FlatmapTransformation', 'flatmapFunction')/]        
	
	return out.iterator();
}

private class Window {
	private long startTime;
	private long endTime;
	
	public long getEnd() {
		return this.endTime;
	}
	
	public long getStart() {
		return this.startTime;
	}
	
	public void setStart(long startTime) {
		this.startTime = startTime;
	}
	
	public void setEnd(long endTime) {
		this.endTime = endTime;
	}	
	
}

}
	[/if]
[/file]
[/template]
